{
  "stats": {
    "suites": 2,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-19T14:23:06.034Z",
    "end": "2020-04-19T14:23:07.995Z",
    "duration": 1961,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "76f7873b-8a09-4dea-b82d-a0251992dc0c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "54fb6c97-f40f-4eec-adeb-4a5ebd4ff1d6",
          "title": "Movies API test",
          "fullFile": "/Users/oleks/masters/web-dev/api-labs/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 594,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "7613f446-a737-42d6-98ab-94a14aa95be2",
              "parentUUID": "54fb6c97-f40f-4eec-adeb-4a5ebd4ff1d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "d8c3442b-e170-4e77-90fa-a040b7ae1279",
              "parentUUID": "54fb6c97-f40f-4eec-adeb-4a5ebd4ff1d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "bc8ee07d-160b-4389-9d38-55c6cb073195",
              "parentUUID": "54fb6c97-f40f-4eec-adeb-4a5ebd4ff1d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8c3442b-e170-4e77-90fa-a040b7ae1279",
            "bc8ee07d-160b-4389-9d38-55c6cb073195"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 519,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "b3f89585-be38-4488-b1b4-42abed197db8",
          "title": "Users API test",
          "fullFile": "/Users/oleks/masters/web-dev/api-labs/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 201,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\n_movieModel2.default.create({ id: 1, title: \"A\" });\n_movieModel2.default.create({ id: 2, title: \"B\" });\n_userModel2.default.create(testUser).then(function (res) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "62fce47d-2025-4778-af0c-d42092951db7",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all users",
              "fullTitle": "Users API test should get all users",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/users').expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.be.Array;\n    res.body.should.have.lengthOf(2);\n    res.body[0].username.should.equal('user1');\n    res.body[1].username.should.equal('user2');\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "d70aeecb-ac9e-4a8b-a7ae-4b544e39e416",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "Users API test should update a user",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.favourites = [\"5e9c45fae29fa52c55ddae8c\"];\n(0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(testUser).expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.have.lengthOf(1);\n    done();\n}).catch(done);",
              "err": {},
              "uuid": "3feb3342-0fb5-42e0-a09e-9eb4a98e37a2",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"new_user_test\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "149ee21d-78d1-4f0a-ab43-d204a33235a4",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for a valid user",
              "fullTitle": "Users API test should return a user token for a valid user",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "90472fe1-1542-47e9-b59d-5567034767f5",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for an invalid user",
              "fullTitle": "Users API test should not return a token for an invalid user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401).then(function (res) {\n    res.should.have.property('status').equal(401);\n    _should2.default.not.exist(res.body.token);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "33daf48e-1230-4167-b293-19e1e7c89562",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all favourites of a user",
              "fullTitle": "Users API test should get all favourites of a user",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/users/' + testUser.username + '/favourites').expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.be.Array;\n    res.body.should.have.lengthOf(0);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "b2256f81-b240-4c64-a6e4-0f53ec5c52c7",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add favourties to user",
              "fullTitle": "Users API test should add favourties to user",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: 1 }).expect('Content-type', /json/).expect(201).then(function (res) {\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.be.Array;\n    res.body.favourites.should.not.have.lengthOf(0);\n    res.body.favourites.should.not.have.lengthOf(currentFavs);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "eb9dfec0-0079-4c08-9c2d-67006dd3f809",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add invalid favourties to user",
              "fullTitle": "Users API test should not add invalid favourties to user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ wrongKeyId: 1 }).expect(401).then(function (res) {\n    res.should.have.property('status').equal(401);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "7c5fa742-75b8-4539-840c-c90e6ba2e7c6",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add nonexistant favourties to user",
              "fullTitle": "Users API test should not add nonexistant favourties to user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: -1 }).expect('Content-type', /json/).expect(500).then(function (res) {\n    res.should.have.property('status').equal(500);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "e5945588-0a12-4629-a42b-be65ff7abf76",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to delete favourites",
              "fullTitle": "Users API test should be able to delete favourites",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: 2 }).expect('Content-type', /json/).expect(201).then(function (res) {\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.be.Array;\n    res.body.favourites.should.not.have.lengthOf(0);\n    res.body.favourites.should.not.have.lengthOf(currentFavs);\n    currentFavs = res.body.favourites.length;\n    (0, _supertest2.default)(_index.app).delete('/api/users/' + testUser.username + '/favourites/2').expect('Content-type', /json/).expect(200).then(function (res) {\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('favourites');\n        res.body.favourites.should.be.Array;\n        res.body.favourites.should.not.have.lengthOf(0);\n        res.body.favourites.should.not.have.lengthOf(currentFavs);\n        done();\n    }).catch(function (err) {\n        return done(err);\n    });\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "b444e3a9-b50c-4712-b589-493532ccb3ce",
              "parentUUID": "b3f89585-be38-4488-b1b4-42abed197db8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d70aeecb-ac9e-4a8b-a7ae-4b544e39e416",
            "3feb3342-0fb5-42e0-a09e-9eb4a98e37a2",
            "149ee21d-78d1-4f0a-ab43-d204a33235a4",
            "90472fe1-1542-47e9-b59d-5567034767f5",
            "33daf48e-1230-4167-b293-19e1e7c89562",
            "b2256f81-b240-4c64-a6e4-0f53ec5c52c7",
            "eb9dfec0-0079-4c08-9c2d-67006dd3f809",
            "7c5fa742-75b8-4539-840c-c90e6ba2e7c6",
            "e5945588-0a12-4629-a42b-be65ff7abf76",
            "b444e3a9-b50c-4712-b589-493532ccb3ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 631,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.0"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}