{
  "stats": {
    "suites": 2,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-25T10:51:08.947Z",
    "end": "2020-04-25T10:51:15.377Z",
    "duration": 6430,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "467e4edc-a135-4cf7-ba56-60bc546f0c80",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f738b1c-2884-49db-a265-e954f2767e87",
          "title": "Movies API test",
          "fullFile": "/Users/oleks/masters/web-dev/api-labs/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 562,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser);\ntestMovie.id = 1;\ntestMovie.title = \"Test Movie\";\ntestMovie.reviews = [{ author: 'tester', content: 'review' }];\n_movieModel2.default.create(testMovie).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "4011588b-75e6-4ab6-9bfd-4374af946fb2",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 1321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "5e0386be-85ca-4d37-b535-641263b9d013",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "39247007-14f8-40c8-a0af-623c7551b325",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a movie by id",
              "fullTitle": "Movies API test should get a movie by id",
              "timedOut": false,
              "duration": 1494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/1').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "b0b7fe4a-0601-48b0-bf31-c8df77bdcf57",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get an invalid movie by id",
              "fullTitle": "Movies API test should not get an invalid movie by id",
              "timedOut": false,
              "duration": 1433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/99999999999999').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('status_code').equal(34);\n    res.body.should.have.property('status_message').equal('The resource you requested could not be found.');\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "e0583638-ca13-4f04-b167-d0926e73a253",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get movie reviews",
              "fullTitle": "Movies API test should get movie reviews",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/1/reviews').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(1);\n    res.body.should.have.property('results');\n    res.body.results.should.have.lengthOf(1);\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "ed2dbb3c-41ea-49c2-9772-a375497bc514",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get movie reviews of an invalid movie",
              "fullTitle": "Movies API test should not get movie reviews of an invalid movie",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/99999999/reviews').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(500);\n    res.body.should.be.empty();\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "7271f5c9-735d-4bc5-b42c-847304b217a7",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to add movie reviews",
              "fullTitle": "Movies API test should be able to add movie reviews",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).post('/api/movies/1/reviews').send({ author: \"tester\", content: \"new review\" }).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.not.be.empty();\n    res.body.should.have.lengthOf(2);\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "50cea33b-fb5a-430e-8cab-f3aa65dfa93a",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to add movie reviews to an invalid movie",
              "fullTitle": "Movies API test should not be able to add movie reviews to an invalid movie",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).post('/api/movies/999999999/reviews').send({ author: \"tester\", content: \"new review\" }).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(500);\n    res.body.should.be.empty();\n    done();\n  }).catch(done);\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "0aaecbdc-a1e6-46bf-9c8c-ee187d5acad8",
              "parentUUID": "9f738b1c-2884-49db-a265-e954f2767e87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e0386be-85ca-4d37-b535-641263b9d013",
            "39247007-14f8-40c8-a0af-623c7551b325",
            "b0b7fe4a-0601-48b0-bf31-c8df77bdcf57",
            "e0583638-ca13-4f04-b167-d0926e73a253",
            "ed2dbb3c-41ea-49c2-9772-a375497bc514",
            "7271f5c9-735d-4bc5-b42c-847304b217a7",
            "50cea33b-fb5a-430e-8cab-f3aa65dfa93a",
            "0aaecbdc-a1e6-46bf-9c8c-ee187d5acad8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5042,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
          "title": "Users API test",
          "fullFile": "/Users/oleks/masters/web-dev/api-labs/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 192,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\n_movieModel2.default.create({ id: 1, title: \"A\" });\n_movieModel2.default.create({ id: 2, title: \"B\" });\n_userModel2.default.create(testUser).then(function (res) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "3c39e6f5-5f04-4a9b-85db-56ebcb31e723",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all users",
              "fullTitle": "Users API test should get all users",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/users').expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.be.Array;\n    res.body.should.have.lengthOf(2);\n    res.body[0].username.should.equal('user1');\n    res.body[1].username.should.equal('user2');\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "d7bcff72-30dc-48a3-b1c4-a296840c715b",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "Users API test should update a user",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.favourites = [\"5e9c45fae29fa52c55ddae8c\"];\n(0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(testUser).expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.have.lengthOf(1);\n    done();\n}).catch(done);",
              "err": {},
              "uuid": "52103e95-5795-4bc0-a051-87a1cb0627a3",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"new_user_test\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "7dbf91f2-822e-48a7-b136-dc20e4f69974",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for a valid user",
              "fullTitle": "Users API test should return a user token for a valid user",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "3253d185-0e0f-4278-aa7b-bcb16059e8a3",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for an invalid user",
              "fullTitle": "Users API test should not return a token for an invalid user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401).then(function (res) {\n    res.should.have.property('status').equal(401);\n    _should2.default.not.exist(res.body.token);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "571e1ba8-64f2-4488-b40d-56b0cd82c7a9",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all favourites of a user",
              "fullTitle": "Users API test should get all favourites of a user",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/users/' + testUser.username + '/favourites').expect('Content-type', /json/).expect(200).then(function (res) {\n    res.should.have.property('status').equal(200);\n    res.body.should.be.Array;\n    res.body.should.have.lengthOf(0);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "3b3f7ba5-963a-4acd-895b-2da386bac952",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add favourties to user",
              "fullTitle": "Users API test should add favourties to user",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: 1 }).expect('Content-type', /json/).expect(201).then(function (res) {\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.be.Array;\n    res.body.favourites.should.not.have.lengthOf(0);\n    res.body.favourites.should.not.have.lengthOf(currentFavs);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "839d0bbf-f60a-4692-a8dc-e551962b6ab2",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add invalid favourties to user",
              "fullTitle": "Users API test should not add invalid favourties to user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ wrongKeyId: 1 }).expect(401).then(function (res) {\n    res.should.have.property('status').equal(401);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "c75c7c31-7fb7-4499-bc83-b6684d39d307",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add nonexistant favourties to user",
              "fullTitle": "Users API test should not add nonexistant favourties to user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: -1 }).expect('Content-type', /json/).expect(500).then(function (res) {\n    res.should.have.property('status').equal(500);\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "89c33c73-6ab0-45a3-8859-7d39ade4a30d",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to delete favourites",
              "fullTitle": "Users API test should be able to delete favourites",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentFavs = testUser.favourites.length;\n(0, _supertest2.default)(_index.app).post('/api/users/' + testUser.username + '/favourites').send({ id: 2 }).expect('Content-type', /json/).expect(201).then(function (res) {\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('favourites');\n    res.body.favourites.should.be.Array;\n    res.body.favourites.should.not.have.lengthOf(0);\n    res.body.favourites.should.not.have.lengthOf(currentFavs);\n    currentFavs = res.body.favourites.length;\n    (0, _supertest2.default)(_index.app).delete('/api/users/' + testUser.username + '/favourites/2').expect('Content-type', /json/).expect(200).then(function (res) {\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('favourites');\n        res.body.favourites.should.be.Array;\n        res.body.favourites.should.not.have.lengthOf(0);\n        res.body.favourites.should.not.have.lengthOf(currentFavs);\n        done();\n    }).catch(function (err) {\n        return done(err);\n    });\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "ab9f2e94-1801-4132-a768-0b3efaf8a975",
              "parentUUID": "aaa659d7-10cb-45e6-969d-fa9385a170bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7bcff72-30dc-48a3-b1c4-a296840c715b",
            "52103e95-5795-4bc0-a051-87a1cb0627a3",
            "7dbf91f2-822e-48a7-b136-dc20e4f69974",
            "3253d185-0e0f-4278-aa7b-bcb16059e8a3",
            "571e1ba8-64f2-4488-b40d-56b0cd82c7a9",
            "3b3f7ba5-963a-4acd-895b-2da386bac952",
            "839d0bbf-f60a-4692-a8dc-e551962b6ab2",
            "c75c7c31-7fb7-4499-bc83-b6684d39d307",
            "89c33c73-6ab0-45a3-8859-7d39ade4a30d",
            "ab9f2e94-1801-4132-a768-0b3efaf8a975"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 623,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.0"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}